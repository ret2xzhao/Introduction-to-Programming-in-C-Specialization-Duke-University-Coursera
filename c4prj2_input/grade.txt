Grading at Wed Apr  3 07:21:59 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==2736== Memcheck, a memory error detector
==2736== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2736== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2736== Command: ./tester hands.txt draw.txt
==2736== Parent PID: 2735
==2736== 
==2736== Invalid read of size 8
==2736==    at 0x4010EB: print_hand (in /graderhome/work/c4prj2_input/tester)
==2736==    by 0x401CEA: main (test-input.c:84)
==2736==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2736== 
==2736== 
==2736== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2736==  Access not within mapped region at address 0x8
==2736==    at 0x4010EB: print_hand (in /graderhome/work/c4prj2_input/tester)
==2736==    by 0x401CEA: main (test-input.c:84)
==2736==  If you believe this happened as a result of a stack
==2736==  overflow in your program's main thread (unlikely but
==2736==  possible), you can try to increase the size of the
==2736==  main thread stack using the --main-stacksize= flag.
==2736==  The main thread stack size used in this run was 8388608.
==2736== 
==2736== HEAP SUMMARY:
==2736==     in use at exit: 80 bytes in 8 blocks
==2736==   total heap usage: 15 allocs, 7 frees, 13,712 bytes allocated
==2736== 
==2736== LEAK SUMMARY:
==2736==    definitely lost: 16 bytes in 1 blocks
==2736==    indirectly lost: 16 bytes in 2 blocks
==2736==      possibly lost: 0 bytes in 0 blocks
==2736==    still reachable: 48 bytes in 5 blocks
==2736==         suppressed: 0 bytes in 0 blocks
==2736== Rerun with --leak-check=full to see details of leaked memory
==2736== 
==2736== For counts of detected and suppressed errors, rerun with: -v
==2736== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==2741== Memcheck, a memory error detector
==2741== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2741== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2741== Command: ./tester hands.txt draw.txt
==2741== Parent PID: 2740
==2741== 
==2741== Invalid read of size 8
==2741==    at 0x4010EB: print_hand (in /graderhome/work/c4prj2_input/tester)
==2741==    by 0x401CEA: main (test-input.c:84)
==2741==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2741== 
==2741== 
==2741== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2741==  Access not within mapped region at address 0x8
==2741==    at 0x4010EB: print_hand (in /graderhome/work/c4prj2_input/tester)
==2741==    by 0x401CEA: main (test-input.c:84)
==2741==  If you believe this happened as a result of a stack
==2741==  overflow in your program's main thread (unlikely but
==2741==  possible), you can try to increase the size of the
==2741==  main thread stack using the --main-stacksize= flag.
==2741==  The main thread stack size used in this run was 8388608.
==2741== 
==2741== HEAP SUMMARY:
==2741==     in use at exit: 200 bytes in 17 blocks
==2741==   total heap usage: 27 allocs, 10 frees, 13,880 bytes allocated
==2741== 
==2741== LEAK SUMMARY:
==2741==    definitely lost: 64 bytes in 4 blocks
==2741==    indirectly lost: 64 bytes in 8 blocks
==2741==      possibly lost: 0 bytes in 0 blocks
==2741==    still reachable: 72 bytes in 5 blocks
==2741==         suppressed: 0 bytes in 0 blocks
==2741== Rerun with --leak-check=full to see details of leaked memory
==2741== 
==2741== For counts of detected and suppressed errors, rerun with: -v
==2741== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==2747== Memcheck, a memory error detector
==2747== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2747== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2747== Command: ./tester h.txt d.txt
==2747== Parent PID: 2746
==2747== 
==2747== Invalid read of size 8
==2747==    at 0x4010EB: print_hand (in /graderhome/work/c4prj2_input/tester)
==2747==    by 0x401CEA: main (test-input.c:84)
==2747==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2747== 
==2747== 
==2747== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2747==  Access not within mapped region at address 0x8
==2747==    at 0x4010EB: print_hand (in /graderhome/work/c4prj2_input/tester)
==2747==    by 0x401CEA: main (test-input.c:84)
==2747==  If you believe this happened as a result of a stack
==2747==  overflow in your program's main thread (unlikely but
==2747==  possible), you can try to increase the size of the
==2747==  main thread stack using the --main-stacksize= flag.
==2747==  The main thread stack size used in this run was 8388608.
==2747== 
==2747== HEAP SUMMARY:
==2747==     in use at exit: 512 bytes in 38 blocks
==2747==   total heap usage: 63 allocs, 25 frees, 14,432 bytes allocated
==2747== 
==2747== LEAK SUMMARY:
==2747==    definitely lost: 64 bytes in 4 blocks
==2747==    indirectly lost: 64 bytes in 8 blocks
==2747==      possibly lost: 0 bytes in 0 blocks
==2747==    still reachable: 384 bytes in 26 blocks
==2747==         suppressed: 0 bytes in 0 blocks
==2747== Rerun with --leak-check=full to see details of leaked memory
==2747== 
==2747== For counts of detected and suppressed errors, rerun with: -v
==2747== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==2753== Memcheck, a memory error detector
==2753== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2753== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2753== Command: ./tester i1 i2
==2753== Parent PID: 2752
==2753== 
==2753== Invalid write of size 8
==2753==    at 0x400E73: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2753==    by 0x400BAE: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2753==    by 0x400CE4: read_input (in /graderhome/work/c4prj2_input/tester)
==2753==    by 0x401BCF: main (test-input.c:69)
==2753==  Address 0x5205ca0 is 16 bytes inside an unallocated block of size 4,186,960 in arena "client"
==2753== 
==2753== Invalid write of size 8
==2753==    at 0x400E8C: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2753==    by 0x400BAE: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2753==    by 0x400CE4: read_input (in /graderhome/work/c4prj2_input/tester)
==2753==    by 0x401BCF: main (test-input.c:69)
==2753==  Address 0x5205ca8 is 24 bytes inside an unallocated block of size 4,186,960 in arena "client"
==2753== 

valgrind: m_mallocfree.c:277 (mk_plain_bszB): Assertion 'bszB != 0' failed.
valgrind: This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==2753==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==2753==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==2753==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==2753==    by 0x38091F36: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==2753==    by 0x38051369: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==2753==    by 0x380D4CF3: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==2753==    by 0x380E3946: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 2753)
==2753==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2753==    by 0x400E56: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2753==    by 0x400BAE: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2753==    by 0x400CE4: read_input (in /graderhome/work/c4prj2_input/tester)
==2753==    by 0x401BCF: main (test-input.c:69)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.


Overall Grade: F
