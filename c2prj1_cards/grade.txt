Grading at Tue Jan 29 06:30:46 UTC 2019
Compiling cards.c
In file included from cards.c:2:0:
cards.c: In function ‘assert_card_valid’:
cards.c:8:12: error: invalid operands to binary >= (have ‘card_t {aka struct card_tag}’ and ‘int’)
   assert(c >= 2 && c <= VALUE_ACE);
            ^
cards.c:8:22: error: invalid operands to binary <= (have ‘card_t {aka struct card_tag}’ and ‘int’)
   assert(c >= 2 && c <= VALUE_ACE);
                      ^
cards.c:9:12: error: invalid operands to binary >= (have ‘card_t {aka struct card_tag}’ and ‘int’)
   assert(c >= SPADES && c <= CLUBS);
            ^
cards.c:9:27: error: invalid operands to binary <= (have ‘card_t {aka struct card_tag}’ and ‘int’)
   assert(c >= SPADES && c <= CLUBS);
                           ^
cards.c: In function ‘value_letter’:
cards.c:46:6: error: expected ‘(’ before ‘c’
   if c = "2"; {
      ^
cards.c:46:8: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   if c = "2"; {
        ^
cards.c:49:3: error: ‘else’ without a previous ‘if’
   else if c = "3"; {
   ^
cards.c:49:11: error: expected ‘(’ before ‘c’
   else if c = "3"; {
           ^
cards.c:49:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "3"; {
             ^
cards.c:52:3: error: ‘else’ without a previous ‘if’
   else if c = "4"; {
   ^
cards.c:52:11: error: expected ‘(’ before ‘c’
   else if c = "4"; {
           ^
cards.c:52:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "4"; {
             ^
cards.c:55:3: error: ‘else’ without a previous ‘if’
   else if c = "5"; {
   ^
cards.c:55:11: error: expected ‘(’ before ‘c’
   else if c = "5"; {
           ^
cards.c:55:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "5"; {
             ^
cards.c:58:3: error: ‘else’ without a previous ‘if’
   else if c = "6"; {
   ^
cards.c:58:11: error: expected ‘(’ before ‘c’
   else if c = "6"; {
           ^
cards.c:58:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "6"; {
             ^
cards.c:61:3: error: ‘else’ without a previous ‘if’
   else if c = "7"; {
   ^
cards.c:61:11: error: expected ‘(’ before ‘c’
   else if c = "7"; {
           ^
cards.c:61:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "7"; {
             ^
cards.c:64:3: error: ‘else’ without a previous ‘if’
   else if c = "8"; {
   ^
cards.c:64:11: error: expected ‘(’ before ‘c’
   else if c = "8"; {
           ^
cards.c:64:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "8"; {
             ^
cards.c:67:3: error: ‘else’ without a previous ‘if’
   else if c = "9"; {
   ^
cards.c:67:11: error: expected ‘(’ before ‘c’
   else if c = "9"; {
           ^
cards.c:67:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "9"; {
             ^
cards.c:70:3: error: ‘else’ without a previous ‘if’
   else if c = "10"; {
   ^
cards.c:70:11: error: expected ‘(’ before ‘c’
   else if c = "10"; {
           ^
cards.c:70:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "10"; {
             ^
cards.c:73:3: error: ‘else’ without a previous ‘if’
   else if c = "Jack"; {
   ^
cards.c:73:11: error: expected ‘(’ before ‘c’
   else if c = "Jack"; {
           ^
cards.c:73:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "Jack"; {
             ^
cards.c:74:18: error: ‘J’ undeclared (first use in this function)
     printf("%d", J);
                  ^
cards.c:74:18: note: each undeclared identifier is reported only once for each function it appears in
cards.c:76:3: error: ‘else’ without a previous ‘if’
   else if c = "Queen"; {
   ^
cards.c:76:11: error: expected ‘(’ before ‘c’
   else if c = "Queen"; {
           ^
cards.c:76:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "Queen"; {
             ^
cards.c:77:18: error: ‘Q’ undeclared (first use in this function)
     printf("%d", Q);
                  ^
cards.c:79:3: error: ‘else’ without a previous ‘if’
   else if c = "King"; {
   ^
cards.c:79:11: error: expected ‘(’ before ‘c’
   else if c = "King"; {
           ^
cards.c:79:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "King"; {
             ^
cards.c:80:18: error: ‘K’ undeclared (first use in this function)
     printf("%d", K);
                  ^
cards.c:82:3: error: ‘else’ without a previous ‘if’
   else if c = "Ace"; {
   ^
cards.c:82:11: error: expected ‘(’ before ‘c’
   else if c = "Ace"; {
           ^
cards.c:82:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "Ace"; {
             ^
cards.c:83:18: error: ‘A’ undeclared (first use in this function)
     printf("%d", A);
                  ^
cards.c: In function ‘suit_letter’:
cards.c:90:6: error: expected ‘(’ before ‘c’
   if c = "SPADES"; {
      ^
cards.c:90:8: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   if c = "SPADES"; {
        ^
cards.c:93:3: error: ‘else’ without a previous ‘if’
   else if c = "HEARTS"; {
   ^
cards.c:93:11: error: expected ‘(’ before ‘c’
   else if c = "HEARTS"; {
           ^
cards.c:93:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "HEARTS"; {
             ^
cards.c:96:3: error: ‘else’ without a previous ‘if’
   else if c = "DIAMONDS"; {
   ^
cards.c:96:11: error: expected ‘(’ before ‘c’
   else if c = "DIAMONDS"; {
           ^
cards.c:96:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "DIAMONDS"; {
             ^
cards.c:99:3: error: ‘else’ without a previous ‘if’
   else if c = "CLUBS"; {
   ^
cards.c:99:11: error: expected ‘(’ before ‘c’
   else if c = "CLUBS"; {
           ^
cards.c:99:13: error: incompatible types when assigning to type ‘card_t {aka struct card_tag}’ from type ‘char *’
   else if c = "CLUBS"; {
             ^
cards.c: In function ‘print_card’:
cards.c:106:15: error: invalid operands to binary + (have ‘char *’ and ‘char *’)
   printf("%c" + "%c",value_letter(card_t c) ,suit_letter(card_t c))
               ^
cards.c:106:35: error: expected expression before ‘card_t’
   printf("%c" + "%c",value_letter(card_t c) ,suit_letter(card_t c))
                                   ^
cards.c:106:58: error: expected expression before ‘card_t’
   printf("%c" + "%c",value_letter(card_t c) ,suit_letter(card_t c))
                                                          ^
cards.c:107:5: error: expected ‘;’ before ‘}’ token
     }
     ^
cards.c: In function ‘card_from_letters’:
cards.c:112:3: error: case label does not reduce to an integer constant
   case "2": temp.value = "2";
   ^
cards.c:112:24: error: assignment makes integer from pointer without a cast [-Werror=int-conversion]
   case "2": temp.value = "2";
                        ^
cards.c:114:3: error: case label does not reduce to an integer constant
   case "3": temp.value = "3";
   ^
cards.c:114:24: error: assignment makes integer from pointer without a cast [-Werror=int-conversion]
   case "3": temp.value = "3";
                        ^
cards.c:116:3: error: case label does not reduce to an integer constant
   case "4": temp.value = "4";
   ^
cards.c:116:24: error: assignment makes integer from pointer without a cast [-Werror=int-conversion]
   case "4": temp.value = "4";
                        ^
cards.c:118:3: error: case label does not reduce to an integer constant
   case "5": temp.value = "5";
   ^
cards.c:118:24: error: assignment makes integer from pointer without a cast [-Werror=int-conversion]
   case "5": temp.value = "5";
                        ^
cards.c:120:3: error: case label does not reduce to an integer constant
   case "6": temp.value = "6";
   ^
cards.c:120:24: error: assignment makes integer from pointer without a cast [-Werror=int-conversion]
   case "6": temp.value = "6";
                        ^
cards.c:122:3: error: case label does not reduce to an integer constant
   case "7": temp.value = "7";
   ^
cards.c:122:24: error: assignment makes integer from pointer without a cast [-Werror=int-conversion]
   case "7": temp.value = "7";
                        ^
cards.c:124:3: error: case label does not reduce to an integer constant
   case "8": temp.value = "8";
   ^
cards.c:124:24: error: assignment makes integer from pointer without a cast [-Werror=int-conversion]
   case "8": temp.value = "8";
                        ^
cards.c:126:3: error: case label does not reduce to an integer constant
   case "9": temp.value = "9";
   ^
cards.c:126:24: error: assignment makes integer from pointer without a cast [-Werror=int-conversion]
   case "9": temp.value = "9";
                        ^
cards.c:128:3: error: case label does not reduce to an integer constant
   case "10": temp.value = "0";
   ^
cards.c:128:25: error: assignment makes integer from pointer without a cast [-Werror=int-conversion]
   case "10": temp.value = "0";
                         ^
cards.c:130:3: error: case label does not reduce to an integer constant
   case "J": temp.value = VALUE_JACK;
   ^
cards.c:132:3: error: case label does not reduce to an integer constant
   case "Q": temp.value = VALUE_QUEEN;
   ^
cards.c:134:3: error: case label does not reduce to an integer constant
   case "K": temp.value = VALUE_KING;
   ^
cards.c:136:3: error: case label does not reduce to an integer constant
   case "A": temp.value = VALUE_ACE;
   ^
cards.c:140:3: error: case label does not reduce to an integer constant
   case "s": temp.value = SPADES;
   ^
cards.c:142:3: error: case label does not reduce to an integer constant
   case "h": temp.value = HEARTS;
   ^
cards.c:144:3: error: case label does not reduce to an integer constant
   case "d": temp.value = DIAMONDS;
   ^
cards.c:146:3: error: case label does not reduce to an integer constant
   case "c": temp.value = CLUBS;
   ^
In file included from cards.c:2:0:
cards.c:149:10: error: void value not ignored as it ought to be
   assert(assert_card_valid(temp));
          ^
cc1: all warnings being treated as errors
Could not compile your card.c!

Overall Grade: FAILED
